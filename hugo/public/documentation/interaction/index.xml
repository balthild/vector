<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interaction on Interactive SVG</title>
    <link>https://interactive-svg.gitlab.io/documentation/interaction/</link>
    <description>Recent content in Interaction on Interactive SVG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://interactive-svg.gitlab.io/documentation/interaction/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependency Functions</title>
      <link>https://interactive-svg.gitlab.io/documentation/interaction/dependency-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/interaction/dependency-functions/</guid>
      <description>All elements contain the ability to define dependencies to other elements. An element declares what it is dependent on using the function .addDependency and then (optionally?) defines an update function which describes how the element should update itself. Circular dependencies will cause an exception. By convention, although hopefully in the future this will be strictly enforced, only the element&amp;rsquo;s data whom have been declared should be used within the update function.</description>
    </item>
    
    <item>
      <title>Keyboard Input</title>
      <link>https://interactive-svg.gitlab.io/documentation/interaction/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/interaction/keyboard/</guid>
      <description>Key board input can be used to change the state of an interactive or control different elements of it. The example below highlights the numbers one through five with the corresponding key on the keyboard when pressed.
window.onkeydown = function( event ) { ... }   import Interactive from &#34;/dist/Interactive.js&#34;; let interactive = new Interactive(&#34;interactivekeyboard-input&#34;); interactive.width = 768; interactive.height = 150; interactive.border = true; let keys = []; let textKeys = []; for( let i = 0; i = 0 &amp;&amp; index = 0 &amp;&amp; index </description>
    </item>
    
    <item>
      <title>Mouse Input</title>
      <link>https://interactive-svg.gitlab.io/documentation/interaction/mouse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/interaction/mouse/</guid>
      <description>horizontal line showing x-position veritical line showing y-position expanding circle on click
interactive.mouse ? interactive.onclick ? interactive.onmousemove ?   import Interactive from &#39;/dist/Interactive.js&#39;; let interactive = new Interactive(&#34;interactivemouse-input&#34;); interactive.width = 768; interactive.height = 200; interactive.border = true; let control = interactive.control( 100, 100); control.root.style.display = &#39;none&#39;; interactive.svg.onmousemove = function( event ) { control.x = event.clientX - interactive.svg.getBoundingClientRect().left; control.y = event.clientY - interactive.svg.getBoundingClientRect().top; control._onchange(); } interactive.svg.onmouseleave = interactive.svg.onmousemove; let xline = interactive.</description>
    </item>
    
  </channel>
</rss>