<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vibe on Interactive SVG</title>
    <link>https://interactive-svg.gitlab.io/</link>
    <description>Recent content in Vibe on Interactive SVG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Feb 2019 10:48:41 -0700</lastBuildDate>
    
	<atom:link href="https://interactive-svg.gitlab.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>World Map</title>
      <link>https://interactive-svg.gitlab.io/documentation/maps/world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/maps/world/</guid>
      <description>let map = interactive.map(&amp;#34;world-map.geojson&amp;#34;);  </description>
    </item>
    
    <item>
      <title>United States</title>
      <link>https://interactive-svg.gitlab.io/documentation/maps/united-states/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/maps/united-states/</guid>
      <description>let map = interactive.map(&amp;#34;united-states.geojson&amp;#34;);  </description>
    </item>
    
    <item>
      <title>Custom Maps</title>
      <link>https://interactive-svg.gitlab.io/documentation/maps/custom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/maps/custom/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Josh</title>
      <link>https://interactive-svg.gitlab.io/team/josh/</link>
      <pubDate>Mon, 11 Feb 2019 10:48:41 -0700</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/team/josh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Zach</title>
      <link>https://interactive-svg.gitlab.io/team/zach/</link>
      <pubDate>Mon, 11 Feb 2019 10:48:38 -0700</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/team/zach/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Derek</title>
      <link>https://interactive-svg.gitlab.io/team/derek/</link>
      <pubDate>Mon, 11 Feb 2019 10:48:32 -0700</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/team/derek/</guid>
      <description>Bio, links to websites other projects, interests.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>https://interactive-svg.gitlab.io/references/</link>
      <pubDate>Thu, 07 Feb 2019 21:34:52 -0700</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/references/</guid>
      <description>  MBTA Visual Guitar Visual 2016 Election Forecast Hip Hop Vocabulary Explained Visually Google Doodles - Muybridge Bezier Info SVG Path Editor? House Hunting SVG Summit Quad Tree R Tree  Google  Google Charts Google Calculator and Web Search Utility Google Fidget Spinner  Five Thirty Eight  Five Thirty Eight Five Thirty Eight - Data Five Thirty Eight - Github Five Thirty Eight - d3 PreProcessing Five Thirty Eight - d3 PreProcessing Choropleth Example Five Thirty Eight - d3 PreProcessing Axes Example  d3  d3 d3 Bar Chart d3 Choropleth d3 animation + bezier  Other Tools  Processing ECharts SigmaJS Desmos High Charts Data Wrapper  </description>
    </item>
    
    <item>
      <title>Animate Along Path</title>
      <link>https://interactive-svg.gitlab.io/documentation/animation/animate-along-path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/animation/animate-along-path/</guid>
      <description>let circle = interactive.circle( 75, 75, 20); let path = interactive.path(&amp;#34;...&amp;#34;); circle.animateAlongPath( path, true, SPEED);   </description>
    </item>
    
    <item>
      <title>Basic Styling</title>
      <link>https://interactive-svg.gitlab.io/documentation/styling/basic-styling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/styling/basic-styling/</guid>
      <description>Primitive elements have two basic properties which can be styled: fill and stroke.
let button = interactive.button( 100, 75, &amp;#34;My Button&amp;#34;);  </description>
    </item>
    
    <item>
      <title>Button</title>
      <link>https://interactive-svg.gitlab.io/documentation/input/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/input/button/</guid>
      <description>let button = interactive.button( 100, 75, &amp;#34;My Button&amp;#34;);   import Interactive from &#34;/dist/Interactive.js&#34;; let interactive = new Interactive(&#34;button-id&#34;); interactive.width = 768; interactive.height = 150; interactive.svg.style.border = &#34;1px solid grey&#34;; interactive.svg.style.marginLeft =&#34;0&#34;; let button = interactive.button( 100, 75, &#34;My Button&#34;);  </description>
    </item>
    
    <item>
      <title>Check Box</title>
      <link>https://interactive-svg.gitlab.io/documentation/input/check-box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/input/check-box/</guid>
      <description>A checkbox has two different states: checked and unchecked. When a user clicks the box the state changes.
let checkBox = interactive.checkBox( 100, 75, &amp;#34;My Checkbox&amp;#34;);   import Interactive from &#34;/dist/Interactive.js&#34;; let interactive = new Interactive(&#34;check-box-id&#34;); interactive.width = 768; interactive.height = 150; interactive.svg.style.border = &#34;1px solid grey&#34;; interactive.svg.style.marginLeft =&#34;0&#34;; let checkBox = interactive.checkBox( 100, 75, &#34;My Checkbox&#34;);  </description>
    </item>
    
    <item>
      <title>Control Point</title>
      <link>https://interactive-svg.gitlab.io/documentation/input/control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/input/control/</guid>
      <description>A control point is a two dimensional point that can be clicked and dragged by the user. The control has a (x,y) position as well as its change in position (dx, dy).
let control = interactive.control( 150, 75);   import Interactive from &#34;/dist/Interactive.js&#34;; let interactive = new Interactive(&#34;control-id&#34;); interactive.width = 768; interactive.height = 150; interactive.svg.style.border = &#34;1px solid grey&#34;; let control = interactive.control( 100, 75);  </description>
    </item>
    
    <item>
      <title>Custom Styling</title>
      <link>https://interactive-svg.gitlab.io/documentation/styling/custom-styling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/styling/custom-styling/</guid>
      <description>Every element within the library has a root property which is a SVG element. This root element contains zero or more child elements all of which can have custom styling applied to them through CSS selectors or Javascript.</description>
    </item>
    
    <item>
      <title>Dependency Functions</title>
      <link>https://interactive-svg.gitlab.io/documentation/interaction/dependency-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/interaction/dependency-functions/</guid>
      <description>All elements contain the ability to define dependencies to other elements. An element declares what it is dependent on using the function .addDependency and then (optionally?) defines an update function which describes how the element should update itself. Circular dependencies will cause an exception. By convention, although hopefully in the future this will be strictly enforced, only the element&amp;rsquo;s data whom have been declared should be used within the update function.</description>
    </item>
    
    <item>
      <title>Ellipse</title>
      <link>https://interactive-svg.gitlab.io/documentation/elements/ellipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/elements/ellipse/</guid>
      <description>let ellipse = interactive.ellipse( 100, 75, 80, 40);    </description>
    </item>
    
    <item>
      <title>Keyboard Input</title>
      <link>https://interactive-svg.gitlab.io/documentation/interaction/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/interaction/keyboard/</guid>
      <description>Key board input can be used to change the state of an interactive or control different elements of it. The example below highlights the numbers one through five with the corresponding key on the keyboard when pressed.
window.onkeydown = function( event ) { ... }   import Interactive from &#34;/dist/Interactive.js&#34;; let interactive = new Interactive(&#34;interactivekeyboard-input&#34;); interactive.width = 768; interactive.height = 150; interactive.border = true; let keys = []; let textKeys = []; for( let i = 0; i = 0 &amp;&amp; index = 0 &amp;&amp; index </description>
    </item>
    
    <item>
      <title>Kurt</title>
      <link>https://interactive-svg.gitlab.io/team/kurt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/team/kurt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Line</title>
      <link>https://interactive-svg.gitlab.io/documentation/elements/line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/elements/line/</guid>
      <description>let line = interactive.line( 50, 25, 150, 125);   import Interactive from &#39;/dist/Interactive.js&#39;; let interactive = new Interactive(&#34;interactiveline&#34;); interactive.width = 768; interactive.height = 150; interactive.svg.style.border = &#34;1px solid grey&#34;; let line = interactive.line( 50, 25, 150, 125);  </description>
    </item>
    
    <item>
      <title>Mouse Input</title>
      <link>https://interactive-svg.gitlab.io/documentation/interaction/mouse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/interaction/mouse/</guid>
      <description>horizontal line showing x-position veritical line showing y-position expanding circle on click
interactive.mouse ? interactive.onclick ? interactive.onmousemove ?   import Interactive from &#39;/dist/Interactive.js&#39;; let interactive = new Interactive(&#34;interactivemouse-input&#34;); interactive.width = 768; interactive.height = 200; interactive.border = true; let control = interactive.control( 100, 100); control.root.style.display = &#39;none&#39;; interactive.svg.onmousemove = function( event ) { control.x = event.clientX - interactive.svg.getBoundingClientRect().left; control.y = event.clientY - interactive.svg.getBoundingClientRect().top; control._onchange(); } interactive.svg.onmouseleave = interactive.svg.onmousemove; let xline = interactive.</description>
    </item>
    
    <item>
      <title>Path</title>
      <link>https://interactive-svg.gitlab.io/documentation/elements/path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/elements/path/</guid>
      <description>let line = interactive.path(&amp;#34;M 50 50 Q 100 150 150 50&amp;#34;);   import Interactive from &#39;/dist/Interactive.js&#39;; let interactive = new Interactive(&#34;interactivepath&#34;); interactive.width = 768; interactive.height = 150; interactive.svg.style.border = &#34;1px solid grey&#34;; let line = interactive.path(&#34;M 50 50 Q 100 150 150 50&#34;);  </description>
    </item>
    
    <item>
      <title>Rectangle</title>
      <link>https://interactive-svg.gitlab.io/documentation/elements/rectangle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/elements/rectangle/</guid>
      <description>let line = interactive.rectangle( 50, 50, 100, 50);   import Interactive from &#39;/dist/Interactive.js&#39;; let interactive = new Interactive(&#34;interactiverectangle&#34;); interactive.width = 768; interactive.height = 150; interactive.svg.style.border = &#34;1px solid grey&#34;; let line = interactive.rectangle( 50, 50, 100, 50);  </description>
    </item>
    
    <item>
      <title>Scaling Coordinates</title>
      <link>https://interactive-svg.gitlab.io/documentation/coordinates/scaling-coordinates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/coordinates/scaling-coordinates/</guid>
      <description>// TODO: Scaling example  </description>
    </item>
    
    <item>
      <title>Slider</title>
      <link>https://interactive-svg.gitlab.io/documentation/input/slider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/input/slider/</guid>
      <description>A slider has a position, width, and starting value.
let slider = interactive.slider( 75, 75, 150, 20);   import Interactive from &#34;/dist/Interactive.js&#34;; let interactive = new Interactive(&#34;interactiveslider&#34;); interactive.width = 768; interactive.height = 150; interactive.svg.style.border = &#34;1px solid grey&#34;; let slider = interactive.slider( 75, 75, 150, 20);  </description>
    </item>
    
    <item>
      <title>Text</title>
      <link>https://interactive-svg.gitlab.io/documentation/elements/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/elements/text/</guid>
      <description>let line = interactive.text( 50, 75, &amp;#34;My Text&amp;#34;);   import Interactive from &#39;/dist/Interactive.js&#39;; let interactive = new Interactive(&#34;interactivetext&#34;); interactive.width = 768; interactive.height = 150; interactive.svg.style.border = &#34;1px solid grey&#34;; let line = interactive.text( 50, 75, &#34;My Text&#34;);  </description>
    </item>
    
    <item>
      <title>Transform Elements</title>
      <link>https://interactive-svg.gitlab.io/documentation/coordinates/transform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://interactive-svg.gitlab.io/documentation/coordinates/transform/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>