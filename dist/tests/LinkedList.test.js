import LinkedList from '../model/LinkedList.js';
describe('LinkedList', function () {
    describe('LinkedList.constructor', function () {
        it('should construct a new linked list', function () {
            new LinkedList();
        });
    });
    describe('LinkedList.first', function () {
        it('should return null if the list is empty', function () {
            let ll = new LinkedList();
            chai.expect(ll.first()).to.equal(null);
        });
        it('should return the first element of the list', function () {
            let ll = new LinkedList();
            ll.insert('a');
            chai.expect(ll.first()).to.equal('a');
        });
        it('should return the first element of the list', function () {
            let ll = new LinkedList();
            ll.insert('a');
            ll.insert('b');
            chai.expect(ll.first()).to.equal('b');
        });
    });
    describe('LinkedList.remove', function () {
        it('should return false when called on an empty list', function () {
            let ll = new LinkedList();
            chai.expect(ll.remove()).to.be.false;
        });
        it('should remove the first element of the list', function () {
            let ll = new LinkedList();
            ll.insert('a');
            ll.insert('b');
            chai.expect(ll.remove()).to.be.true;
            chai.expect(ll.first()).to.equal('a');
        });
    });
    describe('LinkedList.iterator', function () {
        it('should return an iterator with the numbers ', function () {
            let ll = new LinkedList();
            ll.insert(3);
            ll.insert(2);
            ll.insert(1);
            chai.expect(Array.from(ll)).to.deep.equal([1, 2, 3]);
        });
        it('should return an iterator with the numbers ', function () {
            let ll = new LinkedList();
            ll.insert(3);
            ll.insert(2);
            ll.insert(1);
            ll.remove();
            chai.expect(Array.from(ll)).to.deep.equal([2, 3]);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua2VkTGlzdC50ZXN0LmpzIiwic291cmNlUm9vdCI6Ii4vc291cmNlLyIsInNvdXJjZXMiOlsidGVzdHMvTGlua2VkTGlzdC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sVUFBVSxNQUFNLHdCQUF3QixDQUFDO0FBRWhELFFBQVEsQ0FBQyxZQUFZLEVBQUU7SUFFckIsUUFBUSxDQUFDLHdCQUF3QixFQUFFO1FBRWpDLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRTtZQUNyQyxJQUFJLFVBQVUsRUFBVSxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsa0JBQWtCLEVBQUU7UUFFM0IsRUFBRSxDQUFDLHlDQUF5QyxFQUFFO1lBRTVDLElBQUksRUFBRSxHQUFHLElBQUksVUFBVSxFQUFVLENBQUM7WUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFO1lBRWhELElBQUksRUFBRSxHQUFHLElBQUksVUFBVSxFQUFVLENBQUM7WUFDbEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRTtZQUVoRCxJQUFJLEVBQUUsR0FBRyxJQUFJLFVBQVUsRUFBVSxDQUFDO1lBQ2xDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsbUJBQW1CLEVBQUU7UUFFNUIsRUFBRSxDQUFDLGtEQUFrRCxFQUFFO1lBRXJELElBQUksRUFBRSxHQUFHLElBQUksVUFBVSxFQUFVLENBQUM7WUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRTtZQUVoRCxJQUFJLEVBQUUsR0FBRyxJQUFJLFVBQVUsRUFBVSxDQUFDO1lBQ2xDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztZQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxxQkFBcUIsRUFBRTtRQUU5QixFQUFFLENBQUMsNkNBQTZDLEVBQUU7WUFFOUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxVQUFVLEVBQVUsQ0FBQztZQUNsQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFYixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRTtZQUU5QyxJQUFJLEVBQUUsR0FBRyxJQUFJLFVBQVUsRUFBVSxDQUFDO1lBQ2xDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDYixFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUVYLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=