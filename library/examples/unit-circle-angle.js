/**
* An interactive to demonstrate how the radius of a circle can be used to
* measure the angle between two rays.
*
* June 9, 2019
* Kurt Bruns
*/
import Interactive from 'https://unpkg.com/@interactive-svg/library/library/Interactive.js';

// Initialize the interactive
let id = 'unit-circle-angle';
let interactive = new Interactive(id);
interactive.window = false;
interactive.width = 320;
interactive.height = 320;
interactive.originX = interactive.width / 2;
interactive.originY = interactive.height / 2;
// Create a circle
let circle = interactive.circle(0, 0, 100);
// Create a control
let control = interactive.control(circle.r * Math.cos(-1), circle.r * Math.sin(-1));
control.constrainToCircle(circle.cx, circle.cy, circle.r);
// Create a path
let path = interactive.path('');
path.root.style.fill = 'gray';
path.root.style.fillOpacity = '.3';
path.update = function () {
    let flag = (control.y > 0) ? 1 : 0;
    path.d = `M 0 0
            L ${circle.r} 0
            L ${circle.r / 3} 0
            A ${circle.r / 3} ${circle.r / 3} 0 ${flag} 0 ${control.x / 3} ${control.y / 3}
            L ${control.x} ${control.y}
            z`;
};
path.update();
path.addDependency(control);
// Create a point at the origin
let point = interactive.circle(0, 0, 3);
point.fill = 'black';
// Gets the normalized angle between zero and tau. TODO: Maybe transform the
// coordinate system so that the positive y-direction is up instead of down.
// UPDATE: transform = 'scale(1,-1)' applied to the main svg  didn't quite work
// as expected: the text element was upside down, but maybe that could be
// reversed? bleh.
function getAngle() {
    if (control.y <= 0) {
        return Math.abs(Math.atan2(control.y, control.x));
    }
    else {
        return Math.PI * 2 - Math.atan2(control.y, control.x);
    }
}
// Create text to display the current angle. TODO: add a check-box to change
// between radians and degrees
let text = interactive.text(0, 130, "test");
text.addDependency(control);
text.update = function () {
    text.contents = `angle = ${getAngle().toFixed(3)}`;
};
text.update();
text.x = -text.root.textLength.baseVal.value / 2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC1jaXJjbGUtYW5nbGUuanMiLCJzb3VyY2VSb290IjoiLi9zb3VyY2UvIiwic291cmNlcyI6WyJleGFtcGxlcy91bml0LWNpcmNsZS1hbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUU7QUFFRixPQUFPLFdBQVcsTUFBTSxtQkFBbUIsQ0FBQztBQUU1Qyw2QkFBNkI7QUFDN0IsSUFBSSxFQUFFLEdBQUcsbUJBQW1CLENBQUM7QUFDN0IsSUFBSSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEMsV0FBVyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDM0IsV0FBVyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDeEIsV0FBVyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDekIsV0FBVyxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQztBQUMxQyxXQUFXLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDO0FBRTNDLGtCQUFrQjtBQUNsQixJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFNUMsbUJBQW1CO0FBQ25CLElBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUUsTUFBTSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRixPQUFPLENBQUMsaUJBQWlCLENBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUUzRCxnQkFBZ0I7QUFDaEIsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRztJQUNaLElBQUksSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDLENBQUMsR0FBRztnQkFDSyxNQUFNLENBQUMsQ0FBQztnQkFDUixNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUM7Z0JBQ1YsTUFBTSxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLE9BQU8sQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEdBQUMsQ0FBQztnQkFDbEUsT0FBTyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQztjQUN4QixDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBQ0YsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUU1QiwrQkFBK0I7QUFDL0IsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLEtBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO0FBRXJCLDRFQUE0RTtBQUM1RSw0RUFBNEU7QUFDNUUsK0VBQStFO0FBQy9FLHlFQUF5RTtBQUN6RSxrQkFBa0I7QUFDbEIsU0FBUyxRQUFRO0lBQ2YsSUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRztRQUNuQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BEO1NBQU07UUFDTCxPQUFPLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUUsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEQ7QUFDSCxDQUFDO0FBRUQsNEVBQTRFO0FBQzVFLDhCQUE4QjtBQUM5QixJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHO0lBQ1osSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3JELENBQUMsQ0FBQztBQUNGLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNkLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBBbiBpbnRlcmFjdGl2ZSB0byBkZW1vbnN0cmF0ZSBob3cgdGhlIHJhZGl1cyBvZiBhIGNpcmNsZSBjYW4gYmUgdXNlZCB0b1xuKiBtZWFzdXJlIHRoZSBhbmdsZSBiZXR3ZWVuIHR3byByYXlzLlxuKlxuKiBKdW5lIDksIDIwMTlcbiogS3VydCBCcnVuc1xuKi9cblxuaW1wb3J0IEludGVyYWN0aXZlIGZyb20gJy4uL0ludGVyYWN0aXZlLmpzJztcblxuLy8gSW5pdGlhbGl6ZSB0aGUgaW50ZXJhY3RpdmVcbmxldCBpZCA9ICd1bml0LWNpcmNsZS1hbmdsZSc7XG5sZXQgaW50ZXJhY3RpdmUgPSBuZXcgSW50ZXJhY3RpdmUoaWQpO1xuaW50ZXJhY3RpdmUud2luZG93ID0gZmFsc2U7XG5pbnRlcmFjdGl2ZS53aWR0aCA9IDMyMDtcbmludGVyYWN0aXZlLmhlaWdodCA9IDMyMDtcbmludGVyYWN0aXZlLm9yaWdpblggPSBpbnRlcmFjdGl2ZS53aWR0aC8yO1xuaW50ZXJhY3RpdmUub3JpZ2luWSA9IGludGVyYWN0aXZlLmhlaWdodC8yO1xuXG4vLyBDcmVhdGUgYSBjaXJjbGVcbmxldCBjaXJjbGUgPSBpbnRlcmFjdGl2ZS5jaXJjbGUoIDAsIDAsIDEwMCk7XG5cbi8vIENyZWF0ZSBhIGNvbnRyb2xcbmxldCBjb250cm9sID0gaW50ZXJhY3RpdmUuY29udHJvbCggY2lyY2xlLnIqTWF0aC5jb3MoLTEpLCBjaXJjbGUucipNYXRoLnNpbigtMSkpO1xuY29udHJvbC5jb25zdHJhaW5Ub0NpcmNsZSggY2lyY2xlLmN4LCBjaXJjbGUuY3ksIGNpcmNsZS5yKTtcblxuLy8gQ3JlYXRlIGEgcGF0aFxubGV0IHBhdGggPSBpbnRlcmFjdGl2ZS5wYXRoKCcnKTtcbnBhdGgucm9vdC5zdHlsZS5maWxsID0gJ2dyYXknO1xucGF0aC5yb290LnN0eWxlLmZpbGxPcGFjaXR5ID0gJy4zJztcbnBhdGgudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBmbGFnID0gKGNvbnRyb2wueSA+IDApID8gMSA6IDA7XG4gIHBhdGguZCA9IGBNIDAgMFxuICAgICAgICAgICAgTCAke2NpcmNsZS5yfSAwXG4gICAgICAgICAgICBMICR7Y2lyY2xlLnIvM30gMFxuICAgICAgICAgICAgQSAke2NpcmNsZS5yLzN9ICR7Y2lyY2xlLnIvM30gMCAke2ZsYWd9IDAgJHtjb250cm9sLngvM30gJHtjb250cm9sLnkvM31cbiAgICAgICAgICAgIEwgJHtjb250cm9sLnh9ICR7Y29udHJvbC55fVxuICAgICAgICAgICAgemA7XG59O1xucGF0aC51cGRhdGUoKTtcbnBhdGguYWRkRGVwZW5kZW5jeShjb250cm9sKTtcblxuLy8gQ3JlYXRlIGEgcG9pbnQgYXQgdGhlIG9yaWdpblxubGV0IHBvaW50ID0gaW50ZXJhY3RpdmUuY2lyY2xlKCAwLCAwLCAzKTtcbnBvaW50LmZpbGwgPSAnYmxhY2snO1xuXG4vLyBHZXRzIHRoZSBub3JtYWxpemVkIGFuZ2xlIGJldHdlZW4gemVybyBhbmQgdGF1LiBUT0RPOiBNYXliZSB0cmFuc2Zvcm0gdGhlXG4vLyBjb29yZGluYXRlIHN5c3RlbSBzbyB0aGF0IHRoZSBwb3NpdGl2ZSB5LWRpcmVjdGlvbiBpcyB1cCBpbnN0ZWFkIG9mIGRvd24uXG4vLyBVUERBVEU6IHRyYW5zZm9ybSA9ICdzY2FsZSgxLC0xKScgYXBwbGllZCB0byB0aGUgbWFpbiBzdmcgIGRpZG4ndCBxdWl0ZSB3b3JrXG4vLyBhcyBleHBlY3RlZDogdGhlIHRleHQgZWxlbWVudCB3YXMgdXBzaWRlIGRvd24sIGJ1dCBtYXliZSB0aGF0IGNvdWxkIGJlXG4vLyByZXZlcnNlZD8gYmxlaC5cbmZ1bmN0aW9uIGdldEFuZ2xlKCkge1xuICBpZiggY29udHJvbC55IDw9IDAgKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKE1hdGguYXRhbjIoIGNvbnRyb2wueSwgY29udHJvbC54KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE1hdGguUEkqMiAtIE1hdGguYXRhbjIoIGNvbnRyb2wueSwgY29udHJvbC54KTtcbiAgfVxufVxuXG4vLyBDcmVhdGUgdGV4dCB0byBkaXNwbGF5IHRoZSBjdXJyZW50IGFuZ2xlLiBUT0RPOiBhZGQgYSBjaGVjay1ib3ggdG8gY2hhbmdlXG4vLyBiZXR3ZWVuIHJhZGlhbnMgYW5kIGRlZ3JlZXNcbmxldCB0ZXh0ID0gaW50ZXJhY3RpdmUudGV4dCggMCwgMTMwLCBcInRlc3RcIik7XG50ZXh0LmFkZERlcGVuZGVuY3koY29udHJvbCk7XG50ZXh0LnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICB0ZXh0LmNvbnRlbnRzID0gYGFuZ2xlID0gJHtnZXRBbmdsZSgpLnRvRml4ZWQoMyl9YDtcbn07XG50ZXh0LnVwZGF0ZSgpO1xudGV4dC54ID0gLXRleHQucm9vdC50ZXh0TGVuZ3RoLmJhc2VWYWwudmFsdWUvMjtcbiJdfQ==
